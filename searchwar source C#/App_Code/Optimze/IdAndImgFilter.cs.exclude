using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;

/// <summary>
/// This code is made by VirtualRichard and Durden81.
/// URL for code: http://forum.umbraco.org/yaf_postst5965_W3C-Validation-ASPNET-ViewState-and-HTML-401.aspx
/// </summary>
namespace Company.Utilities {
    public class IdAndImgFilter : Stream {
        Stream responseStream;
        StringBuilder responseHtml;
        long position;

        public IdAndImgFilter(Stream inputStream) {
            responseStream = inputStream;
            responseHtml = new StringBuilder();
        }

        public override bool CanRead {
            get {
                return true;
            }
        }
        public override bool CanSeek {
            get {
                return true;
            }
        }
        public override bool CanWrite {
            get {
                return true;
            }
        }
        public override void Close() {
            responseStream.Close();
        }
        public override void Flush() {
            responseStream.Flush();
        }
        public override long Length {
            get {
                return 0;
            }
        }
        public override long Position {
            get {
                return position;
            }
            set {
                position = value;
            }
        }
        public override long Seek(long offset, SeekOrigin origin) {
            return responseStream.Seek(offset, origin);
        }
        public override void SetLength(long length) {
            responseStream.SetLength(length);
        }
        public override int Read(byte[] buffer, int offset, int count) {
            return responseStream.Read(buffer, offset, count);
        }
        public override void Write(byte[] buffer, int offset, int count) {
            string strBuffer = System.Text.Encoding.Default.GetString(buffer, offset, count);

            Regex eof = new Regex("</html>", RegexOptions.IgnoreCase);

            if (!eof.IsMatch(strBuffer)) {
                responseHtml.Append(strBuffer);
            } else {
                responseHtml.Append(strBuffer);
                /*(?<=((src=)|(href=))[^><]*?)&(?!.{1,4};)
                This part checks for & in href and src properties.
                 *
                */
                Regex allToBeChanged = new Regex("(?<=((src=)|(href=))[^><]*?)&(?!.{1,4};)", RegexOptions.Singleline | RegexOptions.IgnoreCase);
                string finalHtml = allToBeChanged.Replace(responseHtml.ToString(), new MatchEvaluator(this.GetReplaceText));
                byte[] data = System.Text.Encoding.Default.GetBytes(finalHtml);
                responseStream.Write(data, 0, data.Length);
            }
        }

        public string GetReplaceText(Match m) {
            string x = m.Value;
            switch (x) {
                case " ": // it matches the last space in a img tag that doesn't have an alt tag
                    return " alt=\"\" ";
                case "&":
                    return "&amp;";
            }
            //throw new Exception("There was no matching string, the regular expression needs fixing");
            return x;
        }

    }
}